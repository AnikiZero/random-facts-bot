import os
import random
import sqlite3
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
OWNER_ID = int(os.getenv("OWNER_ID"))
BOT_TOKEN = os.getenv("BOT_TOKEN")
last_fact_id = None  # –î–ª—è –∞–Ω—Ç–∏–ø–æ–≤—Ç–æ—Ä–∞

# === –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ===
conn = sqlite3.connect("facts.db")
cursor = conn.cursor()
cursor.execute("""
    CREATE TABLE IF NOT EXISTS facts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        fact TEXT NOT NULL,
        category TEXT NOT NULL
    )
""")
conn.commit()

# === –ù–∞–ø–æ–ª–Ω–∏–º –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏ ===
def fill_facts():
    facts = [
        ("–ê–Ω—Ç–∞—Ä–∫—Ç–∏–¥–∞ ‚Äî —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –ø—É—Å—Ç—ã–Ω—è –Ω–∞ –ó–µ–º–ª–µ!", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è"),
        ("–ú–µ–¥—É–∑—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –±–æ–ª–µ–µ 500 –º–∏–ª–ª–∏–æ–Ω–æ–≤ –ª–µ—Ç!", "–ë–∏–æ–ª–æ–≥–∏—è"),
        ("–ù–∞ –í–µ–Ω–µ—Ä–µ –¥–µ–Ω—å –¥–ª–∏–Ω–Ω–µ–µ –≥–æ–¥–∞.", "–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è"),
        ("–£ –æ—Å—å–º–∏–Ω–æ–≥–∞ —Ç—Ä–∏ —Å–µ—Ä–¥—Ü–∞.", "–ë–∏–æ–ª–æ–≥–∏—è"),
        ("–ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –≥–ª–∞–∑ —Ä–∞–∑–ª–∏—á–∞–µ—Ç –¥–æ 10 –º–ª–Ω –æ—Ç—Ç–µ–Ω–∫–æ–≤.", "–ß–µ–ª–æ–≤–µ–∫"),
        ("–ü–µ—Ä–≤–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –≤ –∫–æ—Å–º–æ—Å–µ ‚Äî –∞—Ä–∞–±–∏–¥–æ–ø—Å–∏—Å.", "–ö–æ—Å–º–æ—Å"),
        ("–°–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–Ω–∞ ‚Äî 31 –º–µ—Ç—Ä!", "–ü—Ä–∏—Ä–æ–¥–∞"),
        ("–ü—á—ë–ª—ã –º–æ–≥—É—Ç —É–∑–Ω–∞–≤–∞—Ç—å –ª–∏—Ü–∞ –ª—é–¥–µ–π.", "–ë–∏–æ–ª–æ–≥–∏—è"),
        ("–ù–∞ –¥–Ω–µ –ú–∞—Ä–∏–∞–Ω—Å–∫–æ–π –≤–ø–∞–¥–∏–Ω—ã –¥–∞–≤–ª–µ–Ω–∏–µ –≤ 1000 —Ä–∞–∑ –≤—ã—à–µ.", "–û–∫–µ–∞–Ω"),
        ("–°–ª–æ–Ω –º–æ–∂–µ—Ç –ø–ª–∞–∫–∞—Ç—å.", "–ñ–∏–≤–æ—Ç–Ω—ã–µ"),
        ("–ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –ó–µ–º–ª—è –ø—Ä–æ–ª–µ—Ç–∞–µ—Ç 30 –∫–º!", "–ö–æ—Å–º–æ—Å"),
        ("–°–≤–µ—Ç –∑–≤—ë–∑–¥ ‚Äî —ç—Ç–æ –ø—Ä–æ—à–ª–æ–µ –≤–æ –≤—Ä–µ–º–µ–Ω–∏.", "–ö–æ—Å–º–æ—Å"),
        ("–í —Å–µ—Ä–¥—Ü–µ —á–µ–ª–æ–≤–µ–∫–∞ –æ–∫–æ–ª–æ 5 –ª–∏—Ç—Ä–æ–≤ –∫—Ä–æ–≤–∏.", "–ß–µ–ª–æ–≤–µ–∫"),
        ("–ü–ª–∞–Ω–µ—Ç–∞ –£—Ä–∞–Ω –≤—Ä–∞—â–∞–µ—Ç—Å—è –ª—ë–∂–∞ –Ω–∞ –±–æ–∫—É.", "–ö–æ—Å–º–æ—Å"),
        ("–°–∞–º–æ–µ –≥–ª—É–±–æ–∫–æ–µ –æ–∑–µ—Ä–æ ‚Äî –ë–∞–π–∫–∞–ª.", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è"),
        ("–ö–∏—Ç—ã –ø–æ—é—Ç –ø–µ—Å–Ω–∏ –¥–ª—è –æ–±—â–µ–Ω–∏—è.", "–ñ–∏–≤–æ—Ç–Ω—ã–µ"),
        ("–ù–∞ –Æ–ø–∏—Ç–µ—Ä–µ —à—Ç–æ—Ä–º –¥–ª–∏—Ç—Å—è —Å–æ—Ç–Ω–∏ –ª–µ—Ç.", "–ö–æ—Å–º–æ—Å"),
        ("–ö–æ—à–∫–∏ —Å–ø—è—Ç –æ–∫–æ–ª–æ 70% –∂–∏–∑–Ω–∏.", "–ñ–∏–≤–æ—Ç–Ω—ã–µ"),
        ("–í—É–ª–∫–∞–Ω—ã –∏–∑–≤–µ—Ä–≥–∞—é—Ç –ª–∞–≤—É —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π 1200¬∞C.", "–ü—Ä–∏—Ä–æ–¥–∞"),
        ("–û–∫–µ–∞–Ω—ã –ø–æ–∫—Ä—ã–≤–∞—é—Ç 71% –ó–µ–º–ª–∏.", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è"),
    ]
    for fact, category in facts:
        cursor.execute("INSERT INTO facts (fact, category) VALUES (?, ?)", (fact, category))
    conn.commit()

# –¢–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ ‚Äî –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ç—å!
# fill_facts()

# === –•–µ–Ω–¥–ª–µ—Ä—ã ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç —Ñ–∞–∫—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π /randomfact, /categories –∏–ª–∏ /addfact."
    )

async def random_fact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global last_fact_id
    cursor.execute("SELECT * FROM facts")
    facts = cursor.fetchall()

    if not facts:
        await update.message.reply_text("–§–∞–∫—Ç–æ–≤ –Ω–µ—Ç.")
        return

    fact = random.choice(facts)
    while len(facts) > 1 and fact[0] == last_fact_id:
        fact = random.choice(facts)

    last_fact_id = fact[0]
    await update.message.reply_text(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {fact[2]}\n\n{fact[1]}")

async def add_fact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != OWNER_ID:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–∞–∫—Ç—ã.")
        return

    args = context.args
    if len(args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /addfact [–ö–∞—Ç–µ–≥–æ—Ä–∏—è] [–¢–µ–∫—Å—Ç —Ñ–∞–∫—Ç–∞]")
        return

    category = args[0]
    fact_text = " ".join(args[1:])

    cursor.execute("INSERT INTO facts (fact, category) VALUES (?, ?)", (fact_text, category))
    conn.commit()
    await update.message.reply_text(f"‚úÖ –§–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω!\n\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n{fact_text}")

async def last_fact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cursor.execute("SELECT * FROM facts ORDER BY id DESC LIMIT 1")
    fact = cursor.fetchone()
    if fact:
        await update.message.reply_text(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {fact[2]}\n\n{fact[1]}")
    else:
        await update.message.reply_text("–§–∞–∫—Ç–æ–≤ –Ω–µ—Ç.")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cursor.execute("SELECT COUNT(*) FROM facts")
    count = cursor.fetchone()[0]
    await update.message.reply_text(f"üìä –í—Å–µ–≥–æ —Ñ–∞–∫—Ç–æ–≤ –≤ –±–∞–∑–µ: {count}")

async def categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cursor.execute("SELECT DISTINCT category FROM facts")
    categories = [row[0] for row in cursor.fetchall()]
    if not categories:
        await update.message.reply_text("–ö–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç.")
        return

    keyboard = [
        [InlineKeyboardButton(cat, callback_data=f"cat_{cat}")] for cat in categories
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)

async def category_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    category = query.data.replace("cat_", "")

    cursor.execute("SELECT * FROM facts WHERE category = ?", (category,))
    facts = cursor.fetchall()
    if not facts:
        await query.edit_message_text(f"–§–∞–∫—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} –Ω–µ—Ç.")
        return

    fact = random.choice(facts)
    await query.edit_message_text(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {fact[2]}\n\n{fact[1]}")

# === –ó–∞–ø—É—Å–∫ ===

app = ApplicationBuilder().token(BOT_TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("randomfact", random_fact))
app.add_handler(CommandHandler("addfact", add_fact))
app.add_handler(CommandHandler("lastfact", last_fact))
app.add_handler(CommandHandler("stats", stats))
app.add_handler(CommandHandler("categories", categories))
app.add_handler(CallbackQueryHandler(category_callback))

app.run_polling()