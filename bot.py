import sqlite3
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
import random
import os

# ==== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ====
OWNER_ID = int(os.getenv("5757028331"))
BOT_TOKEN = os.getenv("7483963905:AAGsdHReggsvE5PAIr5kAVh-eFiiMeQR4Ok")
last_fact_id = None  # –î–ª—è –∞–Ω—Ç–∏–ø–æ–≤—Ç–æ—Ä–∞

# ==== –†–∞–±–æ—Ç–∞ —Å –ë–î ====
def init_db():
    conn = sqlite3.connect('facts.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS facts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            fact TEXT NOT NULL UNIQUE,
            category TEXT DEFAULT '–û–±—â–∞—è'
        )
    ''')
    conn.commit()
    conn.close()

def add_fact(fact_text, category="–û–±—â–∞—è"):
    conn = sqlite3.connect('facts.db')
    cursor = conn.cursor()
    try:
        cursor.execute('INSERT INTO facts (fact, category) VALUES (?, ?)', (fact_text, category))
        conn.commit()
        result = True
    except sqlite3.IntegrityError:
        result = False
    conn.close()
    return result

def get_random_fact_exclude_last():
    global last_fact_id
    conn = sqlite3.connect('facts.db')
    cursor = conn.cursor()
    if last_fact_id is None:
        cursor.execute('SELECT id, fact FROM facts ORDER BY RANDOM() LIMIT 1')
    else:
        cursor.execute('SELECT id, fact FROM facts WHERE id != ? ORDER BY RANDOM() LIMIT 1', (last_fact_id,))
    row = cursor.fetchone()
    conn.close()
    if row:
        last_fact_id = row[0]
        return row[1]
    else:
        return "‚ùó –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∞–∫—Ç–æ–≤."

def get_fact_by_category(category):
    global last_fact_id
    conn = sqlite3.connect('facts.db')
    cursor = conn.cursor()
    cursor.execute('SELECT id, fact FROM facts WHERE category = ? ORDER BY RANDOM() LIMIT 1', (category,))
    row = cursor.fetchone()
    conn.close()
    if row:
        last_fact_id = row[0]
        return row[1]
    else:
        return "‚ùó –ù–µ—Ç —Ñ–∞–∫—Ç–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."

def get_categories():
    conn = sqlite3.connect('facts.db')
    cursor = conn.cursor()
    cursor.execute('SELECT DISTINCT category FROM facts')
    rows = cursor.fetchall()
    conn.close()
    return [row[0] for row in rows]

def get_last_fact():
    conn = sqlite3.connect('facts.db')
    cursor = conn.cursor()
    cursor.execute('SELECT fact, category FROM facts ORDER BY id DESC LIMIT 1')
    row = cursor.fetchone()
    conn.close()
    if row:
        return f"{row[0]}\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {row[1]}"
    else:
        return "‚ùó –ü–æ–∫–∞ –Ω–µ—Ç —Ñ–∞–∫—Ç–æ–≤!"

def count_facts():
    conn = sqlite3.connect('facts.db')
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM facts')
    count = cursor.fetchone()[0]
    conn.close()
    return count

# ==== –ù–æ–≤—ã–π –Ω–∞–±–æ—Ä —Ñ–∞–∫—Ç–æ–≤ ====
facts_list = [
    ("–ê–Ω—Ç–∞—Ä–∫—Ç–∏–¥–∞ ‚Äî —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –ø—É—Å—Ç—ã–Ω—è –Ω–∞ –ó–µ–º–ª–µ.", "–ü—Ä–∏—Ä–æ–¥–∞"),
    ("–ù–∞ –í–µ–Ω–µ—Ä–µ –¥–µ–Ω—å –¥–ª–∏—Ç—Å—è –¥–æ–ª—å—à–µ, —á–µ–º –≥–æ–¥.", "–ö–æ—Å–º–æ—Å"),
    ("–£ –æ—Å—å–º–∏–Ω–æ–≥–∞ —Ç—Ä–∏ —Å–µ—Ä–¥—Ü–∞.", "–ñ–∏–≤–æ—Ç–Ω—ã–µ"),
    ("–ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –≥–ª–∞–∑ —Ä–∞–∑–ª–∏—á–∞–µ—Ç –¥–æ 10 –º–∏–ª–ª–∏–æ–Ω–æ–≤ —Ü–≤–µ—Ç–æ–≤.", "–ß–µ–ª–æ–≤–µ–∫"),
    ("–ü—á—ë–ª—ã —É–∑–Ω–∞—é—Ç –ª–∏—Ü–∞ –ª—é–¥–µ–π.", "–ñ–∏–≤–æ—Ç–Ω—ã–µ"),
    ("–°–≤–µ—Ç –∑–≤—ë–∑–¥ ‚Äî –≤–∑–≥–ª—è–¥ –≤ –ø—Ä–æ—à–ª–æ–µ.", "–ö–æ—Å–º–æ—Å"),
    ("–°–ª–æ–Ω –º–æ–∂–µ—Ç –ø–ª–∞–∫–∞—Ç—å –∏ –ø–æ–º–Ω–∏—Ç—å —É—à–µ–¥—à–∏—Ö.", "–ñ–∏–≤–æ—Ç–Ω—ã–µ"),
    ("80% –≤—É–ª–∫–∞–Ω–æ–≤ ‚Äî –ø–æ–¥ –≤–æ–¥–æ–π.", "–ü—Ä–∏—Ä–æ–¥–∞"),
    ("–°–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–Ω–∞ ‚Äî 31 –º–µ—Ç—Ä.", "–ü—Ä–∏—Ä–æ–¥–∞"),
    ("–ó–µ–º–ª—è –ø—Ä–æ–ª–µ—Ç–∞–µ—Ç 30 –∫–º –≤ —Å–µ–∫—É–Ω–¥—É.", "–ö–æ—Å–º–æ—Å"),
    ("–ß–µ–ª–æ–≤–µ–∫ –º–æ—Ä–≥–∞–µ—Ç 15 —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É.", "–ß–µ–ª–æ–≤–µ–∫"),
    ("–≠–≤–µ—Ä–µ—Å—Ç —Ä–∞—Å—Ç—ë—Ç –Ω–∞ 4 –º–º –≤ –≥–æ–¥.", "–ü—Ä–∏—Ä–æ–¥–∞"),
    ("–ú–æ–∑–≥ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ 75% –∏–∑ –≤–æ–¥—ã.", "–ß–µ–ª–æ–≤–µ–∫"),
    ("–î–µ–ª—å—Ñ–∏–Ω—ã –∑–æ–≤—É—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –ø–æ –∏–º–µ–Ω–∏.", "–ñ–∏–≤–æ—Ç–Ω—ã–µ"),
    ("–ù–∞ –ü–ª—É—Ç–æ–Ω–µ –µ—Å—Ç—å –ª–µ–¥—è–Ω—ã–µ –≤—É–ª–∫–∞–Ω—ã.", "–ö–æ—Å–º–æ—Å"),
    ("–ì—Ä–µ–Ω–ª–∞–Ω–¥—Å–∫–∞—è –∞–∫—É–ª–∞ –∂–∏–≤—ë—Ç –¥–æ 400 –ª–µ—Ç.", "–ñ–∏–≤–æ—Ç–Ω—ã–µ"),
    ("–ß–µ–ª–æ–≤–µ–∫ —Ç–µ—Ä—è–µ—Ç –¥–æ 100 –≤–æ–ª–æ—Å –≤ –¥–µ–Ω—å.", "–ß–µ–ª–æ–≤–µ–∫"),
    ("–°–∞–º–∞—è –±–æ–ª—å—à–∞—è –ø–µ—â–µ—Ä–∞ ‚Äî –•–∞–Ω–≥ –°–æ–Ω –î—É–Ω–≥.", "–ü—Ä–∏—Ä–æ–¥–∞"),
    ("–ù–∞–¥ –ó–µ–º–ª—ë–π –ª–µ—Ç–∞—é—Ç —Ç—ã—Å—è—á–∏ —Å–ø—É—Ç–Ω–∏–∫–æ–≤.", "–ö–æ—Å–º–æ—Å"),
    ("–£ —Ç–∏–≥—Ä–æ–≤ –ø–æ–ª–æ—Å–∫–∏ –¥–∞–∂–µ –Ω–∞ –∫–æ–∂–µ.", "–ñ–∏–≤–æ—Ç–Ω—ã–µ"),
    ("–õ–µ—Ç—É—á–∏–µ –º—ã—à–∏ ‚Äî –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª–µ—Ç–∞—é—â–∏–µ –º–ª–µ–∫–æ–ø–∏—Ç–∞—é—â–∏–µ.", "–ñ–∏–≤–æ—Ç–Ω—ã–µ"),
    ("–û–∫–µ–∞–Ω —Ö—Ä–∞–Ω–∏—Ç 95% –Ω–µ—Ä–∞–∑–≤–µ–¥–∞–Ω–Ω—ã—Ö –≥–ª—É–±–∏–Ω.", "–ü—Ä–∏—Ä–æ–¥–∞"),
    ("–°–µ—Ä–¥—Ü–µ —Å–∏–Ω–µ–≥–æ –∫–∏—Ç–∞ ‚Äî —Ä–∞–∑–º–µ—Ä–æ–º —Å –º–∞—à–∏–Ω—É.", "–ñ–∏–≤–æ—Ç–Ω—ã–µ"),
]

def fill_facts():
    for fact, category in facts_list:
        add_fact(fact, category)

# ==== –•–µ–Ω–¥–ª–µ—Ä—ã ====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìö –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç", callback_data='get_fact')],
        [InlineKeyboardButton("üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data='show_categories')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏!\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/randomfact ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç\n"
        "/categories ‚Äî –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n"
        "/addfact ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–∫—Ç (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)\n"
        "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/about ‚Äî –æ–±–æ –º–Ω–µ\n"
        "/lastfact ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–∫—Ç\n"
        "/help ‚Äî –ø–æ–º–æ—â—å",
        reply_markup=reply_markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìö –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
        "/randomfact ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç\n"
        "/categories ‚Äî –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n"
        "/addfact ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–∫—Ç (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)\n"
        "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/about ‚Äî –æ–±–æ –º–Ω–µ\n"
        "/lastfact ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–∫—Ç\n"
    )

async def random_fact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    fact = get_random_fact_exclude_last()
    await update.message.reply_text(fact)

async def show_categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    categories = get_categories()
    if not categories:
        await update.message.reply_text("‚ùó –ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    buttons = [[InlineKeyboardButton(cat, callback_data=f'cat_{cat}')] for cat in categories]
    reply_markup = InlineKeyboardMarkup(buttons)
    await update.message.reply_text("üìÇ –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data == 'get_fact':
        fact = get_random_fact_exclude_last()
        await query.edit_message_text(text=fact)
    elif data == 'show_categories':
        categories = get_categories()
        buttons = [[InlineKeyboardButton(cat, callback_data=f'cat_{cat}')] for cat in categories]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.edit_message_text("üìÇ –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)
    elif data.startswith('cat_'):
        category = data[4:]
        fact = get_fact_by_category(category)
        await query.edit_message_text(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n{fact}")

async def add_fact_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != OWNER_ID:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–∞–∫—Ç—ã.")
        return
    if not context.args:
        await update.message.reply_text("‚öôÔ∏è –§–æ—Ä–º–∞—Ç: /addfact –ö–∞—Ç–µ–≥–æ—Ä–∏—è|–§–∞–∫—Ç")
        return
    text = ' '.join(context.args)
    if "|" not in text:
        await update.message.reply_text("‚öôÔ∏è –§–æ—Ä–º–∞—Ç: /addfact –ö–∞—Ç–µ–≥–æ—Ä–∏—è|–§–∞–∫—Ç")
        return
    category, fact_text = map(str.strip, text.split("|", 1))
    if not category or not fact_text:
        await update.message.reply_text("‚öôÔ∏è –û–±–∞ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.")
        return
    if add_fact(fact_text, category):
        await update.message.reply_text(f"‚úÖ –§–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω!\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
    else:
        await update.message.reply_text("‚ö†Ô∏è –¢–∞–∫–æ–π —Ñ–∞–∫—Ç —É–∂–µ –µ—Å—Ç—å!")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    total = count_facts()
    await update.message.reply_text(f"üìä –í—Å–µ–≥–æ —Ñ–∞–∫—Ç–æ–≤ –≤ –±–∞–∑–µ: {total}")

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ü§ñ –ë–æ—Ç-—Ñ–∞–∫—Ç–æ–ª–æ–≥, –∞–≤—Ç–æ—Ä ‚Äî @anikisz")

async def last_fact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    fact = get_last_fact()
    await update.message.reply_text(f"üÜï –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–∫—Ç:\n{fact}")

async def categories_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_categories(update, context)

# ==== –ó–∞–ø—É—Å–∫ ====
if __name__ == '__main__':
    init_db()
    fill_facts()

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("randomfact", random_fact))
    app.add_handler(CommandHandler("categories", categories_command))
    app.add_handler(CommandHandler("addfact", add_fact_command))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("about", about))
    app.add_handler(CommandHandler("lastfact", last_fact))
    app.add_handler(CallbackQueryHandler(button_handler))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()